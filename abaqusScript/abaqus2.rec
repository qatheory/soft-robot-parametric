# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models['Model-1'].Material(name='Paper')
mdb.models['Model-1'].materials['Paper'].Density(table=((7.5e-10, ), ))
mdb.models['Model-1'].materials['Paper'].Elastic(table=((6500.0, 0.2), ))
mdb.models['Model-1'].Material(name='Elastosil')
mdb.models['Model-1'].materials['Elastosil'].Density(table=((1.13e-09, ), ))
mdb.models['Model-1'].materials['Elastosil'].Hyperelastic(materialType=
    ISOTROPIC, table=((0.11, 0.02, 0.0, 0.0, 0.0, 0.0), ), testData=OFF, type=
    YEOH, volumetricResponse=VOLUMETRIC_DATA)
mdb.models['Model-1'].HomogeneousSolidSection(material='Elastosil', name=
    'Sec-Elastosil', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='Paper', name=
    'Sec-Paper', thickness=None)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    0.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 12.0), point2=(
    5.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(5.0, 12.0), point2=(
    5.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(5.0, 3.0), point2=(
    6.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(6.0, 3.0), point2=(
    6.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(6.0, 12.0), point2=(
    11.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(11.0, 12.0), point2=
    (11.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(11.0, 3.0), point2=(
    12.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(12.0, 3.0), point2=(
    12.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(12.0, 12.0), point2=
    (17.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(17.0, 12.0), point2=
    (17.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(17.0, 3.0), point2=(
    18.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(18.0, 3.0), point2=(
    18.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(18.0, 12.0), point2=
    (23.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(23.0, 12.0), point2=
    (23.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(23.0, 3.0), point2=(
    24.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(24.0, 3.0), point2=(
    24.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(24.0, 12.0), point2=
    (29.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(29.0, 12.0), point2=
    (29.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    1.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(1.0, 0.0), point2=(
    1.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(1.0, 10.0), point2=(
    4.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(4.0, 10.0), point2=(
    4.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(4.0, 0.0), point2=(
    7.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(7.0, 0.0), point2=(
    7.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(7.0, 10.0), point2=(
    10.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(10.0, 10.0), point2=
    (10.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(10.0, 0.0), point2=(
    13.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(13.0, 0.0), point2=(
    13.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(13.0, 10.0), point2=
    (16.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(16.0, 10.0), point2=
    (16.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(16.0, 0.0), point2=(
    19.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(19.0, 0.0), point2=(
    19.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(19.0, 10.0), point2=
    (22.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(22.0, 10.0), point2=
    (22.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(22.0, 0.0), point2=(
    25.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(25.0, 0.0), point2=(
    25.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(25.0, 10.0), point2=
    (28.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(28.0, 10.0), point2=
    (28.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(28.0, 0.0), point2=(
    29.0, 0.0))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Main-Body', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Main-Body'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Main-Body'].Set(faces=
    mdb.models['Model-1'].parts['Main-Body'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), name='Set-Main-Body')
mdb.models['Model-1'].parts['Main-Body'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Main-Body'].sets['Set-Main-Body'], 
    sectionName='Sec-Elastosil', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(29.0, 0.1))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Paper', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Paper'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].parts['Paper'].Set(faces=
    mdb.models['Model-1'].parts['Paper'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), name='Set-Paper')
mdb.models['Model-1'].parts['Paper'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Paper'].sets['Set-Paper'], sectionName=
    'Sec-Paper', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(29.0, 2.4))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Base-A', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Base-A'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].parts['Base-A'].Set(faces=
    mdb.models['Model-1'].parts['Base-A'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), name='Set-Base-A')
mdb.models['Model-1'].parts['Base-A'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Base-A'].sets['Set-Base-A'], sectionName=
    'Sec-Elastosil', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(29.0, 2.5))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Base-B', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Base-B'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].parts['Base-B'].Set(faces=
    mdb.models['Model-1'].parts['Base-B'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), name='Set-Base-B')
mdb.models['Model-1'].parts['Base-B'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Base-B'].sets['Set-Base-B'], sectionName=
    'Sec-Elastosil', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Base-B'].Surface(name='Top-of-B', side1Edges=
    mdb.models['Model-1'].parts['Base-B'].edges.getSequenceFromMask(mask=(
    '[#4 ]', ), ))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Base-A', part=
    mdb.models['Model-1'].parts['Base-A'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Base-B', part=
    mdb.models['Model-1'].parts['Base-B'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Main-Body', 
    part=mdb.models['Model-1'].parts['Main-Body'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Paper', part=
    mdb.models['Model-1'].parts['Paper'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Base-A', ), vector=
    (0.0, -2.4, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Base-B', ), vector=
    (0.0, -5.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Paper', ), vector=(
    0.0, -2.5, 0.0))
mdb.models['Model-1'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=[mdb.models['Model-1'].rootAssembly.instances['Base-A'], 
    mdb.models['Model-1'].rootAssembly.instances['Base-B'], 
    mdb.models['Model-1'].rootAssembly.instances['Main-Body'], 
    mdb.models['Model-1'].rootAssembly.instances['Paper']], keepIntersections=
    ON, name='Merged-Body', originalInstances=SUPPRESS)
mdb.models['Model-1'].parts['Merged-Body'].Surface(name='Surf-Inner Cavity', 
    side1Edges=
    mdb.models['Model-1'].parts['Merged-Body'].edges.getSequenceFromMask(mask=(
    '[#7777700 #1f0000 ]', ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].StaticStep(name='Step-Pressure', nlgeom=ON, previous=
    'Initial')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Merged-Body-1'].edges.getSequenceFromMask(
    mask=('[#0 #4000 ]', ), ), name='Set-FixedFace')
mdb.models['Model-1'].EncastreBC(createStepName='Step-Pressure', localCsys=None
    , name='Fixed End', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-FixedFace'])
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Step-Pressure', 
    distributionType=UNIFORM, field='', magnitude=0.01, name='Load-Pressure', 
    region=
    mdb.models['Model-1'].rootAssembly.instances['Merged-Body-1'].surfaces['Surf-Inner Cavity'])
mdb.models['Model-1'].ContactProperty('Chamber Walls')
mdb.models['Model-1'].interactionProperties['Chamber Walls'].TangentialBehavior(
    formulation=FRICTIONLESS)
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-Contact', side1Edges=
    mdb.models['Model-1'].rootAssembly.instances['Merged-Body-1'].edges.getSequenceFromMask(
    mask=('[#40000000 #1555 ]', ), ))
mdb.models['Model-1'].SelfContactStd(createStepName='Step-Pressure', 
    interactionProperty='Chamber Walls', name='Walls', surface=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-Contact'], thickness=ON)
mdb.models['Model-1'].parts['Merged-Body'].setMeshControls(elemShape=TRI, 
    regions=
    mdb.models['Model-1'].parts['Merged-Body'].faces.getSequenceFromMask(mask=(
    '[#f ]', ), ))
mdb.models['Model-1'].parts['Merged-Body'].setElementType(elemTypes=(ElemType(
    elemCode=CPS8R, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD, secondOrderAccuracy=OFF, distortionControl=DEFAULT)), 
    regions=mdb.models['Model-1'].parts['Merged-Body'].sets['Set-Main-Body'])
mdb.models['Model-1'].parts['Merged-Body'].setElementType(elemTypes=(ElemType(
    elemCode=CPS8R, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD, secondOrderAccuracy=OFF, distortionControl=DEFAULT)), 
    regions=mdb.models['Model-1'].parts['Merged-Body'].sets['Set-Base-A'])
mdb.models['Model-1'].parts['Merged-Body'].setElementType(elemTypes=(ElemType(
    elemCode=CPS8R, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD, secondOrderAccuracy=OFF, distortionControl=DEFAULT)), 
    regions=mdb.models['Model-1'].parts['Merged-Body'].sets['Set-Base-B'])
mdb.models['Model-1'].parts['Merged-Body'].setElementType(elemTypes=(ElemType(
    elemCode=CPS8R, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD, secondOrderAccuracy=OFF, distortionControl=DEFAULT)), 
    regions=mdb.models['Model-1'].parts['Merged-Body'].sets['Set-Paper'])
mdb.models['Model-1'].parts['Merged-Body'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['Merged-Body'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Merged-Body'].Set(name='Set-Node', nodes=
    mdb.models['Model-1'].parts['Merged-Body'].nodes.getSequenceFromMask(mask=(
    '[#20 ]', ), ))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=THREADS, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, scratch=
    '', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-1'].submit()
mdb.jobs['Job-1'].waitForCompletion()
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models['Model-1'].Material(name='Paper')
mdb.models['Model-1'].materials['Paper'].Density(table=((7.5e-10, ), ))
mdb.models['Model-1'].materials['Paper'].Elastic(table=((6500.0, 0.2), ))
mdb.models['Model-1'].Material(name='Elastosil')
mdb.models['Model-1'].materials['Elastosil'].Density(table=((1.13e-09, ), ))
mdb.models['Model-1'].materials['Elastosil'].Hyperelastic(materialType=
    ISOTROPIC, table=((0.11, 0.02, 0.0, 0.0, 0.0, 0.0), ), testData=OFF, type=
    YEOH, volumetricResponse=VOLUMETRIC_DATA)
mdb.models['Model-1'].HomogeneousSolidSection(material='Elastosil', name=
    'Sec-Elastosil', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='Paper', name=
    'Sec-Paper', thickness=None)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    0.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 12.0), point2=(
    5.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(5.0, 12.0), point2=(
    5.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(5.0, 3.0), point2=(
    6.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(6.0, 3.0), point2=(
    6.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(6.0, 12.0), point2=(
    11.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(11.0, 12.0), point2=
    (11.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(11.0, 3.0), point2=(
    12.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(12.0, 3.0), point2=(
    12.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(12.0, 12.0), point2=
    (17.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(17.0, 12.0), point2=
    (17.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(17.0, 3.0), point2=(
    18.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(18.0, 3.0), point2=(
    18.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(18.0, 12.0), point2=
    (23.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(23.0, 12.0), point2=
    (23.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(23.0, 3.0), point2=(
    24.0, 3.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(24.0, 3.0), point2=(
    24.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(24.0, 12.0), point2=
    (29.0, 12.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(29.0, 12.0), point2=
    (29.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    1.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(1.0, 0.0), point2=(
    1.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(1.0, 10.0), point2=(
    4.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(4.0, 10.0), point2=(
    4.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(4.0, 0.0), point2=(
    7.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(7.0, 0.0), point2=(
    7.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(7.0, 10.0), point2=(
    10.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(10.0, 10.0), point2=
    (10.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(10.0, 0.0), point2=(
    13.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(13.0, 0.0), point2=(
    13.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(13.0, 10.0), point2=
    (16.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(16.0, 10.0), point2=
    (16.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(16.0, 0.0), point2=(
    19.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(19.0, 0.0), point2=(
    19.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(19.0, 10.0), point2=
    (22.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(22.0, 10.0), point2=
    (22.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(22.0, 0.0), point2=(
    25.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(25.0, 0.0), point2=(
    25.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(25.0, 10.0), point2=
    (28.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(28.0, 10.0), point2=
    (28.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(28.0, 0.0), point2=(
    29.0, 0.0))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Main-Body', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Main-Body'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Main-Body'].Set(faces=
    mdb.models['Model-1'].parts['Main-Body'].faces.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-Main-Body')
mdb.models['Model-1'].parts['Main-Body'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Main-Body'].sets['Set-Main-Body'], 
    sectionName='Sec-Elastosil', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(29.0, 0.1))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Paper', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Paper'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].parts['Paper'].Set(faces=
    mdb.models['Model-1'].parts['Paper'].faces.getSequenceFromMask(('[#1 ]', ), 
    ), name='Set-Paper')
mdb.models['Model-1'].parts['Paper'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Paper'].sets['Set-Paper'], sectionName=
    'Sec-Paper', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(29.0, 2.4))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Base-A', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Base-A'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].parts['Base-A'].Set(faces=
    mdb.models['Model-1'].parts['Base-A'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-Base-A')
mdb.models['Model-1'].parts['Base-A'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Base-A'].sets['Set-Base-A'], sectionName=
    'Sec-Elastosil', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(29.0, 2.5))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Base-B', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Base-B'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].parts['Base-B'].Set(faces=
    mdb.models['Model-1'].parts['Base-B'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-Base-B')
mdb.models['Model-1'].parts['Base-B'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Base-B'].sets['Set-Base-B'], sectionName=
    'Sec-Elastosil', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Base-B'].Surface(name='Top-of-B', side1Edges=
    mdb.models['Model-1'].parts['Base-B'].edges.getSequenceFromMask(('[#4 ]', 
    ), ))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Base-A', part=
    mdb.models['Model-1'].parts['Base-A'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Base-B', part=
    mdb.models['Model-1'].parts['Base-B'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Main-Body', 
    part=mdb.models['Model-1'].parts['Main-Body'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Paper', part=
    mdb.models['Model-1'].parts['Paper'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Base-A', ), vector=
    (0.0, -2.4, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Base-B', ), vector=
    (0.0, -5.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Paper', ), vector=(
    0.0, -2.5, 0.0))
mdb.models['Model-1'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=[mdb.models['Model-1'].rootAssembly.instances['Base-A'], 
    mdb.models['Model-1'].rootAssembly.instances['Base-B'], 
    mdb.models['Model-1'].rootAssembly.instances['Main-Body'], 
    mdb.models['Model-1'].rootAssembly.instances['Paper']], keepIntersections=
    ON, name='Merged-Body', originalInstances=SUPPRESS)
mdb.models['Model-1'].parts['Merged-Body'].Surface(name='Surf-Inner Cavity', 
    side1Edges=
    mdb.models['Model-1'].parts['Merged-Body'].edges.getSequenceFromMask((
    '[#7777700 #1f0000 ]', ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].StaticStep(name='Step-Pressure', nlgeom=ON, previous=
    'Initial')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Merged-Body-1'].edges.getSequenceFromMask(
    ('[#0 #4000 ]', ), ), name='Set-FixedFace')
mdb.models['Model-1'].EncastreBC(createStepName='Step-Pressure', localCsys=None
    , name='Fixed End', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-FixedFace'])
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Step-Pressure', 
    distributionType=UNIFORM, field='', magnitude=0.01, name='Load-Pressure', 
    region=
    mdb.models['Model-1'].rootAssembly.instances['Merged-Body-1'].surfaces['Surf-Inner Cavity'])
mdb.models['Model-1'].ContactProperty('Chamber Walls')
mdb.models['Model-1'].interactionProperties['Chamber Walls'].TangentialBehavior(
    formulation=FRICTIONLESS)
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-Contact', side1Edges=
    mdb.models['Model-1'].rootAssembly.instances['Merged-Body-1'].edges.getSequenceFromMask(
    ('[#40000000 #1555 ]', ), ))
mdb.models['Model-1'].SelfContactStd(createStepName='Step-Pressure', 
    interactionProperty='Chamber Walls', name='Walls', surface=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-Contact'], thickness=ON)
mdb.models['Model-1'].parts['Merged-Body'].setMeshControls(elemShape=TRI, 
    regions=
    mdb.models['Model-1'].parts['Merged-Body'].faces.getSequenceFromMask((
    '[#f ]', ), ))
mdb.models['Model-1'].parts['Merged-Body'].setElementType(elemTypes=(ElemType(
    elemCode=CPS8R, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD, secondOrderAccuracy=OFF, distortionControl=DEFAULT)), 
    regions=mdb.models['Model-1'].parts['Merged-Body'].sets['Set-Main-Body'])
mdb.models['Model-1'].parts['Merged-Body'].setElementType(elemTypes=(ElemType(
    elemCode=CPS8R, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD, secondOrderAccuracy=OFF, distortionControl=DEFAULT)), 
    regions=mdb.models['Model-1'].parts['Merged-Body'].sets['Set-Base-A'])
mdb.models['Model-1'].parts['Merged-Body'].setElementType(elemTypes=(ElemType(
    elemCode=CPS8R, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD, secondOrderAccuracy=OFF, distortionControl=DEFAULT)), 
    regions=mdb.models['Model-1'].parts['Merged-Body'].sets['Set-Base-B'])
mdb.models['Model-1'].parts['Merged-Body'].setElementType(elemTypes=(ElemType(
    elemCode=CPS8R, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD, secondOrderAccuracy=OFF, distortionControl=DEFAULT)), 
    regions=mdb.models['Model-1'].parts['Merged-Body'].sets['Set-Paper'])
mdb.models['Model-1'].parts['Merged-Body'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['Merged-Body'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Merged-Body'].Set(name='Set-Node', nodes=
    mdb.models['Model-1'].parts['Merged-Body'].nodes.getSequenceFromMask(mask=(
    '[#20 ]', ), ))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=THREADS, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, scratch=
    '', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-1'].submit()
mdb.jobs['Job-1'].waitForCompletion()
